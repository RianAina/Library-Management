openapi: '3.0.2'
info:
  title: API Library
  version: '1.0'
  description: STD22074
servers:
  - url: https://libraryForBooks.com
tags:
  - name: Books
  - name: Author
paths:
  /books:
    get:
      tags: 
        - "Books"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: fromReleaseDate
          description: Filter books by release date starting from this date
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: toReleaseDate
          description: Filter books by release date ending before this date
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: page
          description: Page number for pagination, default 1
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: Number of items per page, default 50
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags: 
        - "Books"
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /books/authors:
    put:
      summary: Attach an Author to Books
      operationId: attachAuthorToBooks
      requestBody:
        description: List of Book and Author IDs to associate
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        204:
          description: The author was successfully attached to the book(s)

  /books/{bookId}/authors/{authorId}:
    put:
      summary: Associate an Author with a Book
      operationId: associateAuthorWithBook
      parameters:
        - in: path
          name: bookId
          description: The ID of the book to associate with the author
          required: true
          schema:
            type: string
        - in: path
          name: authorId
          description: The ID of the author to associate with the book
          required: true
          schema:
            type: string
      responses:
        204:
          description: The author was successfully associated with the book

  /authors:
    get:
      tags: 
        - "Authors"
      summary: Get all authors
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: The returned authors are ordered by updated datetime.
          schema: 
            type: string
          required: false
        - in: path
          name: page
          description: Page number for pagination (default 1)
          required: true
          schema:
            type: integer
            default: 1
        - in: path
          name: pageSize
          description: Number of items per page (default 50)
          required: true
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    put:
      tags: 
        - "Authors"
      summary: Create or update a list of authors
      operationId: crupdateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    delete:
      tags: 
        - "Authors"
      summary: Delete author(s)
      description: Deletes one or more authors by ID(s).
      operationId: deleteAuthors
      requestBody:
        description: List of author IDs to delete
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        204:
          description: The author(s) were successfully deleted

components:
  schemas:
    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          type: string
          enum:
            - M
            - F
    Book:
      allOf:
        - $ref: '#/components/schemas/CrupdateBook'
        - properties:
            author:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
                sex:
                  type: string
                  enum:
                    - M
                    - F
    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string


# TEST

# 2. i. 
# Cela est du au fait que lorsqu'on associe un autheur a un livre,
# il faut specifier les identifiants des deux pour la relation. Donc les details
# tes que les noms peuvent etre consulter en utilisant les identifiants pour récupérer 
# les informations complètes à partir des composants CrupdateBook et Author.

# 2. ii.
# UpdateBookAuthor devrait avoir les propriétés de CrupdateBook et Author lors
# des cas où l'association d'un auteur à un livre implique des modifications ou des 
# mises à jour des informations spécifiques au livre ou à l'auteur en même temps que l'association. Comme 
# par exemple l'ajout de nouvelles informations

# 3. a.
# Les paginations sont necessaires pour la gestion des donnees ainsi que pour la reduction des 
# temps de reponses

# 4. a.
# Peut-on gérer la pagination à travers les en-têtes de la requête ? 
# Oui, il est possible de gérer la pagination en utilisant les en-têtes de la requête.
# Je peux par exemple utiliser un en-tête personnalisé pour spécifier le numéro de page et la taille de la page. 

# 4. b.
# Doit-on gérer la pagination à travers les en-têtes de la requête ?
# Oui, mais il vaut mieux utiliser les parametres pour avoir une bonne lisibilité et plus de facilité.
# En plus, les en-en-têtes sont souvent utilisés pour des informations de controle, mais pas pour la 
# pagination  
